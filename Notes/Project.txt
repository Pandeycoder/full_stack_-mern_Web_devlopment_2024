================================================
	Major Project :- 41(c)/02/2024
=================================================
     	 ---------------------
	    explorejurney.in
      	 ---------------------

===================================================
		Phase : 1   
===================================================



step 1 : /> npm init  (create json package)

	 /> npm i express  (create automate server) 

	 /> npm i ejs  (create template)

	 /> npm i mongoose (create database)



-> Database set Up :-

	const mongoose = require("mongoose");


	const MONGO_URL = 	"mongodb://localhost:27017/explorejurney";
	main()
   	 .then((res) => {
        	console.log(res);
    	}).catch((err) => {
        console.log(err.errors.app.properties);

    	});
	async function main() {
   	 mongoose.connect(MONGO_URL);
	}


-> Rest APIs for CRUD operation .



---------------------------------------------
	Model  : Listing
--------------------------------------------

	-> title               String type

	-> description         String type

	-> image   

	-> price   	       Number

	-> location            String

	-> country             String

----------------
define schema :- 1
-----------------

			const mongoose= 	require("mongoose");
	const Schema=mongoose.Schema;

	const listingSchema=new Schema({

    	title   : {
            type: String,
            required :true,

    	},
    	description :{
        type:String,

   	 },
    	image   : {
        	type:String,
       
        //image undefiend or null or not available
        	default:"https://images.unsplash.com/photo-1	625505826533-5c80aca7d157?ixlib=rb-4.0.3	&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTJ8fGdvYXxlbn	wwfHwwfHx8MA%3D%3D&auto=format&fit=crop&w=	800&q=60",
        
        //image is there but link is not avaliable
        set: (v) => v == ""
         ? 	"https://images.unsplash.com/photo-162550582	6533-5c80aca7d157?ixlib=rb-4.0.3	&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTJ8fGdvYXxlbn	wwfHwwfHx8MA%3D%3D&auto=format&fit=crop&w=	800&q=60"
        :v,
    	},

    	price   :        Number,
   	 location :       String,
    	country  :       String,
		});

const Listing=mongoose.model("Listing",listingSchema);

	module.exports=Listing;

-----------------
app.js   2
--------------
		const express = require("express");
	const app = express();
	const mongoose = require("mongoose");
	const 	Listing=require("./models/listing.js");


	const MONGO_URL = 	"mongodb://localhost:27017/explorejurney";
	main()
    	.then((res) => {
        	console.log("connect db");
    	}).catch((err) => {
       	 console.log(err.errors.app.properties);

   	 });
	async function main() {
    	mongoose.connect(MONGO_URL);
	}
	//----------------root index 	page ------------------------
	app.get("/", (req, res) => {

    	res.send("welcome our website");
	});


	app.get("/testListing",async (req,res)=>{

  	  let sampleListing = new Listing({
        title: "My New Villa",
        description: "By the beach",
        price: 1200,
        loaction: "Calangute , Goa",
        country: "India",
    	});

    	await sampleListing.save();
    	console.log("sample was saved");
    	res.send("success :testing");
	});

	app.listen("8081", () => {
   	 console.log("server is listening 	to :8081");
	});




------------------------
Initialize database  3
-------------------------

const mongoose=require("mongoose");
const initData=require("./data.js");   //link index js file with data.js
const Listing=require("../models/listing.js");
 

const MONGO_URL = "mongodb://localhost:27017/explorejurney";
main()
    .then((res) => {
        console.log("connect db");
    }).catch((err) => {
        console.log(err);

    });
async function main() {
    mongoose.connect(MONGO_URL);
}




const initDB= async () => {

    await Listing.deleteMany({});

    await Listing.insertMany(initData.data);
    console.log("data was initilize");
};

initDB();


---------------------------
index route
===================================================


get : /listing/:id   (show ) -> specific listing do


/-------------index route----------------

app.get("/listing", async (req, res) => {

const allListings= await Listing.find({});
res.render("index.ejs",{allListings});
});


--------------------------
	Read: show route
----------------------------

-> /listing/:id ---------> all data


num.toLocaleString("en-IN");


//------------show route--------------
app.get("/listing/:id",async(req,res)=>{

    let {id}=req.params;
   
    const listing= await Listing.findById(id);

    res.render("show.ejs",{listing});
});

----------------------------------------
Create : New & Create Route
---------------------------------


Get : /listing/new ----> form  --> submit --->Listing----->post

//--------------New route --------

app.get("/listing/new",async(req,res)=>{

    
    res.render("new.ejs");
});




//-----------Create Route----------

app.post("/listing", async (req,res)=>{
    // let {title,description ,image ,price,country,location}=req.body;


    let listing=req.body.listing;

    const newListing=new Listing(listing);

    await newListing.save();


    res.redirect("/listing");
    
    console.log(listing);
});


-----------------------------------
Update : Edit &  Update Route
------------------------------------

get /listing/:id/edit ---> edit form---->submit
                                          |
                                          |
	         Put	<----listing/:id



	/> npm i method-override




	
//-----------Edit route --------------------

app.get("/listing/:id/edit", async (req,res)=>{

    let {id}=req.params;
    const listing= await Listing.findById(id);

   res.render("listings/edit.ejs",{listing});
});


//-----------Update Route-------------

app.put("/listing/:id" , async(req,res)=>{

    let {id} =req.params;

    await Listing.findByIdAndUpdate(id,{...req.body.listing});

    res.redirect("/listing");

});

-------------------------------------
	Delete : Delete Route
-----------------------------------

delete : /listing /:id


// ----------Delete route ------------------

app.delete("/listing/:id", async (req,res)=>{
    let {id} =req.params;

    const deletedListing= await Listing.findByIdAndDelete(id);
    
    console.log(deletedListing);

    res.redirect("/listing"); 

});

==================================================
	What is Ejs mate  :-
=================================================

-> install ejs mate   /> npm i ejs-mate


	const ejsMate=require("ejs-mate");







